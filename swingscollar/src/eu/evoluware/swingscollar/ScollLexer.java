//Copyright (c) 2008 Fred Spiessens - Evoluware http://www.evoluware.eu

/*code partially derived from the syntaxcoloring project 
 * Copyrighted (C) 2000-2001 by Stephen Ostermiller (Syntax.Ostmiller.com) */
/*
 * Copyright (C) 2008 by Fred Spiessens and Stephen Ostermiller */

/* The following code was generated by JFlex 1.4.1 on 17-4-08 10:11 */

/* ScollLexer.java is a generated file.  You probably want to
 * edit ScollLexer.lex to make changes.  Use JFlex to generate it.
 * To generate ScollLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main ScollLexer.lex</code><br>
 * You will then have a file called ScollLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2002 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package eu.evoluware.swingscollar;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

/** 
 * ScollLexer is a SCOLL lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  ScollLexer shredder = new ScollLexer(System.in);
 *  ScollToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 * @see ScollToken
 */ 

public class ScollLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SYSTEM_VARS = 6;
  public static final int SYSTEM = 5;
  public static final int SUBJECT = 10;
  public static final int KDECL = 4;
  public static final int PERMDECL = 2;
  public static final int BEHAVIOR_RULES_VARS = 9;
  public static final int DECLARATIONS = 1;
  public static final int BEHDECL = 3;
  public static final int BEHAVIOR = 7;
  public static final int BEHAVIOR_RULES = 8;
  public static final int YYINITIAL = 0;
  public static final int GOAL = 12;
  public static final int CONFIG = 11;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  7,  0,  6,  7,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6, 17,  8,  0,  0,  8,  8,  8, 39, 12, 18,  8, 16,  8,  5,  9, 
     1,  2,  2,  2,  2,  2,  2,  2,  2,  2, 11, 10,  8, 40, 41, 15, 
     0,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  8,  0,  8,  8, 42, 
     0, 23, 31, 21, 19, 20, 45, 36, 32, 27, 44, 34, 22, 26, 30, 29, 
    25,  3, 24, 28, 38, 43, 33, 35,  3, 37,  3, 13,  8, 14,  8,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\0\3\1\2\3\1\4\1\5"+
    "\1\6\3\4\1\1\1\4\1\1\1\7\1\4\1\10"+
    "\2\1\1\4\1\1\1\11\1\12\1\13\1\1\1\14"+
    "\1\1\1\15\2\1\1\4\1\1\1\16\1\17\1\1"+
    "\1\20\1\1\1\4\1\14\1\1\1\21\1\4\1\1"+
    "\1\4\1\1\1\22\1\21\1\4\1\23\1\1\1\4"+
    "\1\1\1\24\1\25\1\26\2\1\3\4\1\1\1\4"+
    "\1\27\4\1\1\27\1\1\1\4\1\1\1\4\1\1"+
    "\1\26\2\1\3\4\1\1\1\4\5\1\1\4\1\1"+
    "\1\4\1\1\1\30\2\1\3\4\1\30\1\4\2\30"+
    "\1\1\2\30\1\4\1\30\1\31\1\30\2\1\4\4"+
    "\1\1\1\4\2\1\2\4\1\32\1\4\1\1\1\33"+
    "\1\34\1\1\3\4\1\35\1\1\1\36\1\4\1\37"+
    "\1\1\1\40\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u030e\0\u036a\0\u0398\0\u02b2\0\u03c6"+
    "\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u03c6\0\u0508"+
    "\0\u03c6\0\u0536\0\u0564\0\u0592\0\u05c0\0\u03c6\0\u03c6\0\u0564"+
    "\0\u05ee\0\u061c\0\u064a\0\u03c6\0\u0678\0\u06a6\0\u06d4\0\u0702"+
    "\0\u03c6\0\u03c6\0\u0730\0\u03c6\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u03c6\0\u0816\0\u0844\0\u0872\0\u08a0\0\u03c6\0\u0844\0\u08ce"+
    "\0\u03c6\0\u08fc\0\u092a\0\u0958\0\u03c6\0\u0986\0\u09b4\0\u09e2"+
    "\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u047e\0\u0b24"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u06a6\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46"+
    "\0\u0f74\0\u0fa2\0\u03c6\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088"+
    "\0\u047e\0\u10b6\0\u0564\0\u05ee\0\u10e4\0\u06a6\0\u075e\0\u1112"+
    "\0\u0844\0\u0872\0\u08fc\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8"+
    "\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u0398"+
    "\0\u1368\0\u1396\0\u078c\0\u0256\0\u13c4\0\u13f2\0\u1420\0\u144e"+
    "\0\u05ee\0\u147c\0\u0398\0\u14aa\0\u04ac\0\u14d8\0\u0398\0\u030e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\6\16\2\17\1\0\1\20\11\0\1\21\23\16\3\0"+
    "\4\16\6\22\2\17\1\22\1\20\1\22\1\0\15\22"+
    "\1\23\25\22\1\24\1\25\1\26\2\22\2\17\1\22"+
    "\1\27\1\22\1\30\7\22\14\26\1\31\7\26\4\22"+
    "\3\26\1\22\1\24\1\25\1\26\2\22\2\17\1\22"+
    "\1\27\1\22\1\30\7\22\17\26\1\32\4\26\4\22"+
    "\3\26\1\22\1\24\1\25\1\26\2\22\2\17\1\22"+
    "\1\27\1\22\1\30\7\22\11\26\1\33\12\26\4\22"+
    "\3\26\3\34\2\35\1\34\2\17\1\34\1\36\1\37"+
    "\1\30\7\34\14\35\1\40\7\35\1\41\1\42\2\34"+
    "\3\35\4\43\1\44\1\43\2\17\1\43\1\45\2\43"+
    "\1\46\3\43\1\47\31\43\1\50\3\43\4\51\1\52"+
    "\1\51\2\17\1\51\1\53\3\51\1\54\16\51\1\55"+
    "\21\51\3\56\2\57\1\56\2\17\1\56\1\60\1\37"+
    "\1\30\2\56\1\61\4\56\24\57\1\62\1\63\2\56"+
    "\3\57\4\43\1\44\1\43\2\17\1\43\1\45\2\43"+
    "\1\64\3\43\1\47\31\43\1\50\3\43\3\65\1\66"+
    "\1\67\1\65\2\17\1\65\1\70\1\65\1\30\3\65"+
    "\1\71\1\0\2\65\2\66\1\72\21\66\4\65\3\66"+
    "\3\73\1\74\2\73\2\17\1\73\1\75\1\0\1\30"+
    "\1\76\2\73\1\77\1\47\2\73\21\74\1\100\2\74"+
    "\1\101\3\73\3\74\3\102\1\103\2\102\2\17\1\102"+
    "\1\104\1\0\1\30\1\76\2\102\1\0\1\47\1\105"+
    "\1\102\24\103\1\101\3\102\3\103\6\16\15\0\24\16"+
    "\3\0\4\16\6\0\2\17\57\0\1\106\10\0\1\107"+
    "\33\0\6\16\15\0\1\16\1\110\22\16\3\0\4\16"+
    "\6\22\2\0\1\22\1\0\1\22\1\0\50\22\2\0"+
    "\1\22\1\0\1\22\1\0\10\22\1\111\32\22\2\25"+
    "\3\22\2\0\1\22\1\0\1\22\1\0\43\22\5\26"+
    "\2\0\1\22\1\0\1\22\1\0\7\22\24\26\4\22"+
    "\3\26\56\0\1\22\5\26\2\0\1\22\1\0\1\22"+
    "\1\0\7\22\1\26\1\112\22\26\4\22\3\26\1\22"+
    "\5\26\2\0\1\22\1\0\1\22\1\0\7\22\13\26"+
    "\1\113\10\26\4\22\3\26\1\22\5\26\2\0\1\22"+
    "\1\0\1\22\1\0\7\22\22\26\1\114\1\26\4\22"+
    "\3\26\6\34\2\0\2\34\2\0\33\34\1\0\7\34"+
    "\5\35\2\0\2\34\2\0\7\34\24\35\1\0\3\34"+
    "\3\35\6\34\2\0\1\34\1\106\2\0\6\34\1\115"+
    "\24\34\1\0\7\34\5\35\2\0\2\34\2\0\7\34"+
    "\1\35\1\116\22\35\1\0\3\34\3\35\6\34\2\0"+
    "\2\34\2\0\33\34\1\0\1\34\1\117\4\34\6\43"+
    "\2\0\4\43\1\0\3\43\1\0\36\43\5\44\2\0"+
    "\4\43\1\0\3\43\1\0\2\43\24\44\4\43\3\44"+
    "\6\43\2\0\1\43\1\106\2\43\1\0\3\43\1\0"+
    "\1\43\1\120\33\43\6\51\2\0\5\51\1\0\41\51"+
    "\2\52\1\51\2\52\2\0\5\51\1\0\46\51\2\0"+
    "\1\51\1\106\3\51\1\0\4\51\1\121\41\51\2\0"+
    "\5\51\1\0\35\51\1\122\2\51\6\56\2\0\2\56"+
    "\2\0\2\56\1\0\30\56\1\0\7\56\5\57\2\0"+
    "\2\56\2\0\2\56\1\0\4\56\24\57\1\0\3\56"+
    "\3\57\6\56\2\0\1\56\1\106\2\0\2\56\1\0"+
    "\3\56\1\123\24\56\1\0\14\56\2\0\2\56\2\0"+
    "\2\56\1\0\30\56\1\0\1\56\1\124\4\56\6\65"+
    "\2\0\3\65\1\0\3\65\2\0\36\65\5\66\2\0"+
    "\3\65\1\0\3\65\2\0\2\65\24\66\4\65\3\66"+
    "\1\65\2\67\1\65\2\67\2\0\3\65\1\0\3\65"+
    "\2\0\43\65\2\0\1\65\1\106\1\65\1\0\3\65"+
    "\2\0\1\65\1\125\34\65\5\66\2\0\3\65\1\0"+
    "\3\65\2\0\2\65\12\66\1\126\11\66\4\65\3\66"+
    "\6\73\2\0\2\73\3\0\3\73\1\0\26\73\1\0"+
    "\7\73\5\74\2\0\2\73\3\0\3\73\1\0\2\73"+
    "\24\74\1\0\3\73\3\74\6\73\2\0\1\73\1\106"+
    "\3\0\3\73\1\0\1\73\1\127\24\73\1\0\7\73"+
    "\5\74\2\0\2\73\3\0\3\73\1\0\2\73\12\74"+
    "\1\130\11\74\1\0\3\73\3\74\6\102\2\0\2\102"+
    "\3\0\2\102\3\0\25\102\1\0\7\102\5\103\2\0"+
    "\2\102\3\0\2\102\3\0\1\102\24\103\1\0\3\102"+
    "\3\103\6\102\2\0\1\102\1\106\3\0\2\102\3\0"+
    "\1\131\24\102\1\0\6\102\7\106\1\0\46\106\22\107"+
    "\1\132\33\107\6\16\15\0\2\16\1\133\21\16\3\0"+
    "\4\16\6\22\2\0\1\22\1\0\1\22\1\0\14\22"+
    "\1\134\26\22\5\26\2\0\1\22\1\0\1\22\1\0"+
    "\7\22\15\26\1\135\6\26\4\22\3\26\1\22\5\26"+
    "\2\0\1\22\1\0\1\22\1\0\7\22\12\26\1\136"+
    "\11\26\4\22\3\26\1\22\5\26\2\0\1\22\1\0"+
    "\1\22\1\0\7\22\11\26\1\137\12\26\4\22\3\26"+
    "\6\115\2\107\2\115\2\107\6\115\1\140\24\115\1\107"+
    "\6\115\1\34\5\35\2\0\2\34\2\0\7\34\15\35"+
    "\1\141\6\35\1\0\3\34\3\35\6\120\2\107\4\120"+
    "\1\107\3\120\1\107\1\120\1\142\33\120\6\121\2\107"+
    "\5\121\1\107\4\121\1\143\33\121\6\51\2\0\5\51"+
    "\1\0\21\51\1\144\16\51\6\123\2\107\2\123\2\107"+
    "\2\123\1\107\3\123\1\145\24\123\1\107\6\123\6\125"+
    "\2\107\3\125\1\107\3\125\2\107\1\125\1\146\33\125"+
    "\1\65\5\66\2\0\3\65\1\0\3\65\2\0\2\65"+
    "\13\66\1\147\10\66\4\65\3\66\6\127\2\107\2\127"+
    "\3\107\3\127\1\107\1\127\1\150\24\127\1\107\6\127"+
    "\1\73\5\74\2\0\2\73\3\0\3\73\1\0\2\73"+
    "\4\74\1\151\17\74\1\0\3\73\3\74\6\131\2\107"+
    "\2\131\3\107\2\131\3\107\1\152\24\131\1\107\6\131"+
    "\11\107\1\153\10\107\1\132\33\107\6\16\15\0\3\16"+
    "\1\154\20\16\3\0\4\16\6\22\2\0\1\22\1\0"+
    "\1\22\1\0\16\22\1\155\24\22\5\26\2\0\1\22"+
    "\1\0\1\22\1\0\7\22\4\26\1\156\17\26\4\22"+
    "\3\26\1\22\5\26\2\0\1\22\1\0\1\22\1\0"+
    "\7\22\20\26\1\157\3\26\4\22\3\26\1\22\5\26"+
    "\2\0\1\22\1\0\1\22\1\0\7\22\23\26\1\160"+
    "\4\22\3\26\6\115\2\107\1\115\1\161\2\107\6\115"+
    "\1\140\24\115\1\107\6\115\1\34\5\35\2\0\2\34"+
    "\2\0\7\34\4\35\1\162\17\35\1\0\3\34\3\35"+
    "\6\120\2\107\1\120\1\163\2\120\1\107\3\120\1\107"+
    "\1\120\1\142\33\120\6\121\2\107\1\121\1\164\3\121"+
    "\1\107\4\121\1\143\33\121\6\51\2\0\5\51\1\0"+
    "\36\51\1\165\1\51\6\123\2\107\1\123\1\166\2\107"+
    "\2\123\1\107\3\123\1\145\24\123\1\107\6\123\6\125"+
    "\2\107\1\125\1\167\1\125\1\107\3\125\2\107\1\125"+
    "\1\146\33\125\1\65\5\66\2\0\3\65\1\0\3\65"+
    "\2\0\2\65\24\66\4\65\2\66\1\170\6\127\2\107"+
    "\1\127\1\171\3\107\3\127\1\107\1\127\1\150\24\127"+
    "\1\107\6\127\1\73\5\74\2\0\2\73\3\0\3\73"+
    "\1\0\2\73\3\74\1\172\20\74\1\0\3\73\3\74"+
    "\6\131\2\107\1\131\1\173\3\107\2\131\3\107\1\152"+
    "\24\131\1\107\6\131\6\16\15\0\4\16\1\174\17\16"+
    "\3\0\4\16\6\22\2\0\1\22\1\0\1\22\1\0"+
    "\17\22\1\175\23\22\5\26\2\0\1\22\1\0\1\22"+
    "\1\0\7\22\16\26\1\176\5\26\4\22\3\26\1\22"+
    "\5\26\2\0\1\22\1\0\1\22\1\0\7\22\3\26"+
    "\1\177\20\26\4\22\3\26\1\22\5\26\2\0\1\22"+
    "\1\0\1\22\1\0\7\22\1\26\1\200\22\26\4\22"+
    "\3\26\1\34\5\35\2\0\2\34\2\0\7\34\16\35"+
    "\1\201\5\35\1\0\3\34\3\35\6\51\2\0\5\51"+
    "\1\0\6\51\1\202\31\51\1\65\5\66\2\0\3\65"+
    "\1\0\3\65\2\0\2\65\10\66\1\203\13\66\4\65"+
    "\3\66\6\16\15\0\5\16\1\204\16\16\3\0\4\16"+
    "\6\22\2\0\1\22\1\0\1\22\1\0\20\22\1\205"+
    "\22\22\5\26\2\0\1\22\1\0\1\22\1\0\7\22"+
    "\10\26\1\206\13\26\4\22\3\26\1\22\5\26\2\0"+
    "\1\22\1\0\1\22\1\0\7\22\1\26\1\207\22\26"+
    "\4\22\3\26\1\22\5\26\2\0\1\22\1\0\1\22"+
    "\1\0\7\22\7\26\1\210\14\26\4\22\3\26\1\34"+
    "\5\35\2\0\2\34\2\0\7\34\10\35\1\211\13\35"+
    "\1\0\3\34\3\35\6\51\2\0\5\51\1\0\7\51"+
    "\1\212\30\51\1\65\5\66\2\0\3\65\1\0\3\65"+
    "\2\0\2\65\21\66\1\213\2\66\4\65\3\66\6\16"+
    "\15\0\1\16\1\214\22\16\3\0\4\16\6\22\2\0"+
    "\1\22\1\0\1\22\1\0\20\22\1\215\22\22\5\26"+
    "\2\0\1\22\1\0\1\22\1\0\7\22\12\26\1\216"+
    "\11\26\4\22\3\26\1\22\5\26\2\0\1\22\1\0"+
    "\1\22\1\0\7\22\1\217\23\26\4\22\3\26\1\34"+
    "\5\35\2\0\2\34\2\0\7\34\12\35\1\220\11\35"+
    "\1\0\3\34\3\35\6\51\2\0\5\51\1\0\30\51"+
    "\1\221\7\51\6\22\2\0\1\22\1\0\1\22\1\0"+
    "\17\22\1\222\23\22\5\26\2\0\1\22\1\0\1\22"+
    "\1\0\7\22\5\26\1\223\16\26\4\22\3\26\1\22"+
    "\5\26\2\0\1\22\1\0\1\22\1\0\7\22\21\26"+
    "\1\224\2\26\4\22\3\26\1\34\5\35\2\0\2\34"+
    "\2\0\7\34\5\35\1\225\16\35\1\0\3\34\3\35"+
    "\6\22\2\0\1\22\1\0\1\22\1\0\21\22\1\226"+
    "\21\22\5\26\2\0\1\22\1\0\1\22\1\0\7\22"+
    "\1\26\1\227\22\26\4\22\3\26\6\22\2\0\1\22"+
    "\1\0\1\22\1\0\22\22\1\230\17\22";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5382];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\1\1\0\7\1\1\11\6\1\1\11\1\1"+
    "\1\11\4\1\2\11\4\1\1\11\4\1\2\11\1\1"+
    "\1\11\4\1\1\11\4\1\1\11\2\1\1\11\3\1"+
    "\1\11\45\1\1\11\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
 // private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
    private List<String> permDecl = new ArrayList<String>(10);
    private List<String> behDecl = new ArrayList<String>(10);
    private List<String> kDecl = new ArrayList<String>(10);
    private List<String> behaviorTypeNames = new ArrayList<String>(10);
    
    
    public void clearPermDecl(){
		permDecl.clear();
	}
	public void clearBehDecl(){
		behDecl.clear();
	}
	public void clearKDecl(){
		kDecl.clear();
	}
	public void clearBehaviorTypeNames(){
		behaviorTypeNames.clear();
	}
	public void addPermDecl(ScollContextToken tkn){
		permDecl.add(tkn.getContents());
	}
	public void addBehDecl(ScollContextToken tkn){
		behDecl.add(tkn.getContents());
	}
	public void addKDecl(ScollContextToken tkn){
		kDecl.add(tkn.getContents());
	}
	public void addBehaviorTypeName(ScollContextToken tkn){
		behaviorTypeNames.add(tkn.getContents());
	}

	public String getContextIdentifierDescription(ScollContextToken tkn) {
		String contents = tkn.getContents();
		if (permDecl.contains(contents)) return "permissionPredicate";
		if (behDecl.contains(contents)) return "behaviorPredicate";
		if (kDecl.contains(contents)) return "knowledgePredicate";
		return "identifier";
	}
	
	public String getContextBehaviorIdentifierDescription(ScollContextToken tkn) {
		if  ((tkn.getState() == ScollToken.BEHAVIOR_STATE) ||
				(behaviorTypeNames.contains(tkn.getContents())
						&& tkn.getState() == ScollToken.SUBJECT_STATE)){
			return "behaviorIdentifier";
		}
		else {
			return "error";
		}	
	}
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public ScollToken getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        ScollToken t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }
        
    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }
            } else {
                in = System.in;
            }
            ScollLexer shredder = new ScollLexer(in);
            ScollToken t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != ScollToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    }  

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScollLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScollLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    //zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ScollToken getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { lastToken = ScollToken.OPERATOR_LOGICAL_NOT;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 34: break;
        case 6: 
          { lastToken = ScollToken.OPERATOR_COLON;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 35: break;
        case 29: 
          { nextState = SUBJECT;
    lastToken = ScollToken.RESERVED_WORD_SUBJECT;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    yybegin(nextState);
    return (t);
          }
        case 36: break;
        case 18: 
          { lastToken = ScollToken.SEPARATOR_RPAREN;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 37: break;
        case 17: 
          { lastToken = ScollToken.OPERATOR_QUESTION;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 38: break;
        case 30: 
          { nextState = BEHDECL;
    lastToken = ScollToken.RESERVED_WORD_BEHAVIOR;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    yybegin(nextState);
    return (t);
          }
        case 39: break;
        case 24: 
          { lastToken = ScollToken.COMMENT_TRADITIONAL;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 40: break;
        case 15: 
          { nextState = BEHAVIOR_RULES_VARS;
    lastToken = ScollToken.SEPARATOR_LPAREN;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 41: break;
        case 2: 
          { lastToken = ScollToken.WHITE_SPACE;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 42: break;
        case 7: 
          { lastToken = ScollToken.SEPARATOR_SEMICOLON;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 43: break;
        case 23: 
          { lastToken = ScollToken.OPERATOR_IMPLIES;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 44: break;
        case 10: 
          { lastToken = ScollToken.SEPARATOR_COMMA;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 45: break;
        case 26: 
          { nextState = SYSTEM;
    lastToken = ScollToken.RESERVED_WORD_SYSTEM;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    yybegin(nextState);
    return (t);
          }
        case 46: break;
        case 28: 
          { nextState = DECLARATIONS;
    lastToken = ScollToken.RESERVED_WORD_DECLARE;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    yybegin(nextState);
    return (t);
          }
        case 47: break;
        case 27: 
          { nextState = CONFIG;
    lastToken = ScollToken.RESERVED_WORD_CONFIG;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    yybegin(nextState);
    return (t);
          }
        case 48: break;
        case 32: 
          { nextState = KDECL;
    lastToken = ScollToken.RESERVED_WORD_KNOWLEDGE;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    yybegin(nextState);
    return (t);
          }
        case 49: break;
        case 3: 
          { /* At this point, the number we found could still be too large.
     * If it is too large, we need to return an error.
     * Scoll has methods built in that will decode from a string
     * and throw an exception the number is too large 
     */     
    String text = yytext();
    try { // no negative numbers supported
        Integer.decode(text);
        lastToken = ScollToken.LITERAL_INTEGER_DECIMAL;
    } catch (NumberFormatException e){
        lastToken = ScollToken.ERROR_INTEGER_DECIMIAL_SIZE;
    }
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 50: break;
        case 1: 
          { lastToken = ScollToken.ERROR_IDENTIFIER;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 51: break;
        case 16: 
          { nextState = BEHAVIOR_RULES;
    lastToken = ScollToken.SEPARATOR_RPAREN;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 52: break;
        case 21: 
          { lastToken = ScollToken.COMMENT_END_OF_LINE;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 53: break;
        case 19: 
          { lastToken = ScollToken.SEPARATOR_LPAREN;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 54: break;
        case 33: 
          { nextState = PERMDECL;
    lastToken = ScollToken.RESERVED_WORD_PERMISSION;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    yybegin(nextState);
    return (t);
          }
        case 55: break;
        case 31: 
          { nextState = BEHAVIOR;
    lastToken = ScollToken.RESERVED_WORD_BEHAVIOR;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    yybegin(nextState);
    return (t);
          }
        case 56: break;
        case 4: 
          { lastToken = ScollToken.IDENTIFIER;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    return (t);
          }
        case 57: break;
        case 12: 
          { lastToken = ScollToken.BEHAVIOR_IDENTIFIER;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    return (t);
          }
        case 58: break;
        case 25: 
          { nextState = GOAL;
    lastToken = ScollToken.RESERVED_WORD_GOAL;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    yybegin(nextState);
    return (t);
          }
        case 59: break;
        case 9: 
          { nextState = SYSTEM;
    lastToken = ScollToken.SEPARATOR_RPAREN;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 60: break;
        case 22: 
          { lastToken = ScollToken.ERROR_UNCLOSED_COMMENT;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 61: break;
        case 5: 
          { lastToken = ScollToken.OPERATOR_DIVIDE;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 62: break;
        case 11: 
          { lastToken = ScollToken.UNDERBAR_IDENTIFIER;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 63: break;
        case 8: 
          { nextState = SYSTEM_VARS;
    lastToken = ScollToken.SEPARATOR_LPAREN;
    String text = yytext();
    ScollContextToken t = (new ScollContextToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState, this));
    yybegin(nextState);
    return (t);
          }
        case 64: break;
        case 13: 
          { nextState = BEHAVIOR_RULES;
    lastToken = ScollToken.SEPARATOR_LBRACE;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 65: break;
        case 14: 
          { nextState = BEHAVIOR;
    lastToken = ScollToken.SEPARATOR_RBRACE;
    String text = yytext();
    ScollToken t = (new ScollToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return (t);
          }
        case 66: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
